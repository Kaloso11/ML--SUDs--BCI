#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Oct 19 11:17:32 2021

@author: kaloso
"""

import mne
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import glob
import os
mne.set_log_level("WARNING")

# path = mne.datasets.eegbci.load_data(1, 1)
# print(path[0])

SUD1 = mne.io.read_raw_edf("Documents/MEng Research/Trial Tests/SUD1.edf",stim_channel='auto',preload=True)
SUD2 = mne.io.read_raw_edf("Documents/MEng Research/Trial Tests/SUD Trial test 2_EPOCFLEX_139760_2021.10.07T13.39.12+02.00.edf",preload=True)

raw = pd.read_csv("Documents/MEng Research/Kaloso-Trial Tests/Data/Raw.csv",sep=",")
raw2 = pd.read_csv("Documents/MEng Research/Kaloso-Trial Tests/Data/Raw2.csv",sep=",")



# null = np.where(pd.isnull(raw))
# print(null)

#print(raw.isnull().values.any())
#print(SUD1.info['bads'])
# SUD1.plot()
# SUD2.plot()


# file = os.path.join("Documents/MEng Research/Kaloso-Trial Tests/Data", "Raw*.csv")

# files = glob.glob(file)

# df = pd.concat(map(pd.read_csv, files), ignore_index=True)


# df.drop(df.columns[0:3],axis=1,inplace=True)
# df.drop(df.columns[32:],axis=1,inplace=True)

#print (df.shape)

raw.drop(raw.columns[0:3],axis=1,inplace=True)
raw.drop(raw.columns[32:],axis=1,inplace=True)
raw.dropna()


raw2.drop(raw2.columns[0:3],axis=1,inplace=True)
raw2.drop(raw2.columns[32:],axis=1,inplace=True)


#print(raw.isnull().values.any())

#print(df['EEG.Cz'])

#ch_names= raw.columns.tolist()

#print(ch_names)

df_raw = SUD1.get_data()
df_raw = pd.DataFrame (SUD1.get_data())
df = df_raw.T


df.drop(df.columns[0:4],axis=1,inplace=True)
df.drop(df.columns[32:],axis=1,inplace=True)

ch_names = ['Cz', 'Fz','Fp1', 'F7', 'F3', 'FC1', 'C3', 'FC5', 'FT9', 'T7', 'CP5', 'CP1', 'P3', 
            'P7', 'PO9',	'O1', 'Pz',	'Oz', 'O2',	'PO10',	
            'P8', 'P4',	'CP2',	'CP6', 'T8', 'FT10', 'FC6',	'C4', 'FC2','F4', 'F8', 'Fp2']



sfreq = 128.0

info = mne.create_info(ch_names, sfreq,ch_types='eeg',verbose=None)

#raw.info=info

#print(mne.pick_channels(info['ch_names'],include=['bads']))

#samples = np.array(df)
samples1 = np.array(raw)
samples2 = np.array(raw2)

#print(samples1)

#data = samples.T
data1 = samples1.T
data2 = samples2.T

#print(data[0])

#subject = mne.io.RawArray(data,info)

subject1 = mne.io.RawArray(data1,info)

print(subject1)
subject2 = mne.io.RawArray(data2,info)

#print(subject1.info)

picks=mne.pick_channels(ch_names,include=[],exclude=['bads'])

#print(picks)

# subject.plot()
#subject1.plot()
# subject2.plot()

#events = mne.find_events(SUD1,stim_channel='STI 014')



events = mne.make_fixed_length_events(subject1,id=1,start=5,stop=50,duration=2.5,first_samp=True)
#print(events)

epochs = mne.Epochs(subject1, events, event_id=1, tmin=0, tmax=2.5,baseline=(0, 0), reject=None, preload=True)

#subject1.interpolate_bads(reset_bads=False)

# mne.viz.plot_epochs(epochs, picks=picks, scalings=None, n_epochs=2, n_channels=4, title=None, 
#                     events=None, order=None, show=True, block=False, decim='auto', noise_cov=None, 
#                     butterfly=False, show_scrollbars=True, epoch_colors=None)


#mne.filter.notch_filter(subject1, sfreq,np.arange(60, 220,60),filter_length='auto',fir_design='firwin')
#mne.filter.filter_data(subject1, sfreq,l_freq=0.1,h_freq=60)

#subject1.notch_filter(np.arange(60, 120,60))
# subject2.notch_filter(np.arange(60, 120,60))

# subject1.plot()

# print(subject1.info['bads'])
# picks = mne.pick_channels_regexp(subject1.ch_names, regexp='EEG 05.')
# subject1.plot(order=picks, n_channels=len(picks))
